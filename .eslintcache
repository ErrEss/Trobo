[{"C:\\Users\\sharv\\Desktop\\anti-social\\monsterlessonsacademy\\src\\comments\\Comment.js":"1","C:\\Users\\sharv\\Desktop\\anti-social\\monsterlessonsacademy\\src\\comments\\Comments.js":"2","C:\\Users\\sharv\\Desktop\\anti-social\\monsterlessonsacademy\\src\\comments\\CommentForm.js":"3","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\NavBar.js":"4","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\Comment.js":"5","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\Comments.js":"6","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\CommentForm.js":"7","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\api.js":"8","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\Trobo.js":"9","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\App.js":"10","C:\\Users\\sharv\\Desktop\\Trobo\\src\\NavBar.js":"11","C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\Comment.js":"12","C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\Trobo.js":"13","C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\Comments.js":"14","C:\\Users\\sharv\\Desktop\\Trobo\\src\\App.js":"15","C:\\Users\\sharv\\Desktop\\Trobo\\src\\api.js":"16","C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\CommentForm.js":"17","C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\TrollResp.js":"18"},{"size":3367,"mtime":1646191235256,"results":"19","hashOfConfig":"20"},{"size":2764,"mtime":1646450069193,"results":"21","hashOfConfig":"20"},{"size":971,"mtime":1646191235257,"results":"22","hashOfConfig":"20"},{"size":257,"mtime":1646468205420,"results":"23","hashOfConfig":"24"},{"size":3795,"mtime":1646525108689,"results":"25","hashOfConfig":"24"},{"size":2763,"mtime":1646471558957,"results":"26","hashOfConfig":"24"},{"size":1044,"mtime":1646469018527,"results":"27","hashOfConfig":"24"},{"size":451,"mtime":1646471499036,"results":"28","hashOfConfig":"24"},{"size":569,"mtime":1646525716840,"results":"29","hashOfConfig":"24"},{"size":295,"mtime":1646468242334,"results":"30","hashOfConfig":"24"},{"size":257,"mtime":1646468205420,"results":"31","hashOfConfig":"32"},{"size":5030,"mtime":1646632664947,"results":"33","hashOfConfig":"32"},{"size":703,"mtime":1646540730812,"results":"34","hashOfConfig":"32"},{"size":3652,"mtime":1646631969526,"results":"35","hashOfConfig":"32"},{"size":299,"mtime":1646532263101,"results":"36","hashOfConfig":"32"},{"size":451,"mtime":1646471499036,"results":"37","hashOfConfig":"32"},{"size":1145,"mtime":1646631355242,"results":"38","hashOfConfig":"32"},{"size":1006,"mtime":1646632623581,"results":"39","hashOfConfig":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17eqflz",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tzyfbd",{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gb5x9i",{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\sharv\\Desktop\\anti-social\\monsterlessonsacademy\\src\\comments\\Comment.js",["79"],"C:\\Users\\sharv\\Desktop\\anti-social\\monsterlessonsacademy\\src\\comments\\Comments.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\monsterlessonsacademy\\src\\comments\\CommentForm.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\NavBar.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\Comment.js",["80","81"],"import CommentForm from \"./CommentForm\";\r\nimport Trobo from \"./Trobo\";\r\n\r\nconst Comment = ({\r\n  comment,\r\n  replies,\r\n  setActiveComment,\r\n  activeComment,\r\n  updateComment,\r\n  deleteComment,\r\n  addComment,\r\n  trollComment,\r\n  parentId = null,\r\n  currentUserId,\r\n}) => {\r\n  const isEditing =\r\n    activeComment &&\r\n    activeComment.id === comment.id &&\r\n    activeComment.type === \"editing\";\r\n  const isReplying =\r\n    activeComment &&\r\n    activeComment.id === comment.id &&\r\n    activeComment.type === \"replying\";\r\n\r\n  const isTrolling =\r\n    activeComment &&\r\n    activeComment.id === comment.id &&\r\n    activeComment.type === \"trolling\";\r\n  \r\n  const canCounterTroll = true;\r\n  const fiveMinutes = 300000;\r\n  const timePassed = new Date() - new Date(comment.createdAt) > fiveMinutes;\r\n  const canDelete =\r\n    currentUserId === comment.userId && replies.length === 0 && !timePassed;\r\n  const canReply = Boolean(currentUserId);\r\n  const canEdit = currentUserId === comment.userId && !timePassed;\r\n  const replyId = parentId ? parentId : comment.id;\r\n  const createdAt = new Date(comment.createdAt).toLocaleDateString();\r\n  return (\r\n    <div key={comment.id} className=\"comment\">\r\n      <div className=\"comment-image-container\">\r\n        <img src=\"/user-icon.png\" />\r\n      </div>\r\n      <div className=\"comment-right-part\">\r\n        <div className=\"comment-content\">\r\n          <div className=\"comment-author\">{comment.username}  <span className=\"created\">{createdAt}</span></div>\r\n          \r\n        </div>\r\n        {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\r\n        {isEditing && (\r\n          <CommentForm\r\n            submitLabel=\"Update\"\r\n            hasCancelButton\r\n            initialText={comment.body}\r\n            handleSubmit={(text) => updateComment(text, comment.id)}\r\n            handleCancel={() => {\r\n              setActiveComment(null);\r\n            }}\r\n          />\r\n        )}\r\n        <div className=\"comment-actions\">\r\n          {canReply && (\r\n            <div\r\n              className=\"comment-action\"\r\n              onClick={() =>\r\n                setActiveComment({ id: comment.id, type: \"replying\" })\r\n              }\r\n            >\r\n              Reply\r\n            </div>\r\n          )}\r\n          {canEdit && (\r\n            <div\r\n              className=\"comment-action\"\r\n              onClick={() =>\r\n                setActiveComment({ id: comment.id, type: \"editing\" })\r\n              }\r\n            >\r\n              Edit\r\n            </div>\r\n          )}\r\n          {canDelete && (\r\n            <div\r\n              className=\"comment-action\"\r\n              onClick={() => deleteComment(comment.id)}\r\n            >\r\n              Delete\r\n            </div>\r\n          )}\r\n         \r\n          {canCounterTroll && (\r\n               <Trobo trollComment={trollComment}/>\r\n          )}\r\n\r\n          \r\n        </div>\r\n        \r\n        \r\n        {isReplying && (\r\n          <CommentForm\r\n            submitLabel=\"Reply\"\r\n            handleSubmit={(text) => addComment(text, replyId)}\r\n          />\r\n        )}\r\n\r\n\r\n        {replies.length > 0 && (\r\n          <div className=\"replies\">\r\n            {replies.map((reply) => (\r\n              <Comment\r\n                comment={reply}\r\n                key={reply.id}\r\n                setActiveComment={setActiveComment}\r\n                activeComment={activeComment}\r\n                updateComment={updateComment}\r\n                deleteComment={deleteComment}\r\n                addComment={addComment}\r\n                trollComment={trollComment}\r\n                parentId={comment.id}\r\n                replies={[]}\r\n                currentUserId={currentUserId}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\Comments.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\CommentForm.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\api.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\comments\\Trobo.js",[],"C:\\Users\\sharv\\Desktop\\anti-social\\FinalPrj\\src\\App.js",[],"C:\\Users\\sharv\\Desktop\\Trobo\\src\\NavBar.js",[],"C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\Comment.js",["82","83","84"],"import { useState } from \"react/cjs/react.production.min\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Trobo from \"./Trobo\";\r\nimport TrollResp from \"./TrollResp\"\r\n\r\nconst Comment = ({\r\n  comment,\r\n  replies,\r\n  setActiveComment,\r\n  activeComment,\r\n  updateComment,\r\n  deleteComment,\r\n  addComment,\r\n  trollComment,\r\n  trollResponse,\r\n  imgResponse,\r\n  parentId = null,\r\n  currentUserId,\r\n}) => {\r\n  const isEditing =\r\n    activeComment &&\r\n    activeComment.id === comment.id &&\r\n    activeComment.type === \"editing\";\r\n  \r\n    const isReplying =\r\n    activeComment &&\r\n    activeComment.id === comment.id &&\r\n    activeComment.type === \"replying\";\r\n\r\n  const isTrolling =\r\n    activeComment &&\r\n    activeComment.id === comment.id &&\r\n    activeComment.type === \"trolling\";\r\n  \r\n  const canCounterTroll = true;\r\n  const fiveMinutes = 300000;\r\n  const timePassed = new Date() - new Date(comment.createdAt) > fiveMinutes;\r\n  const canDelete =\r\n    currentUserId === comment.userId && replies.length === 0 && !timePassed;\r\n  const canReply = Boolean(currentUserId);\r\n  const canEdit = currentUserId === comment.userId && !timePassed;\r\n  const replyId = parentId ? parentId : comment.id;\r\n  const createdAt = new Date(comment.createdAt).toLocaleDateString();\r\n  const canTroll = trollResponse.length > 0 ? true: false;\r\n  //const [commentTrollResp, setCommentTrollResp] = useState({trollResponse})\r\n\r\n  return (\r\n    <div key={comment.id} className=\"comment\">\r\n      <div className=\"comment-image-container\">\r\n        <img src=\"/user-icon.png\" />\r\n      </div>\r\n      <div className=\"comment-right-part\">\r\n        <div className=\"comment-content\">\r\n          <div className=\"comment-author\">{comment.username}  <span className=\"created\">{createdAt}</span></div>\r\n          \r\n        </div>\r\n        {!isEditing && <div className=\"comment-text\">{comment.body}</div>}\r\n        {isEditing && (\r\n          <CommentForm\r\n            submitLabel=\"Update\"\r\n            hasCancelButton\r\n            initialText={comment.body}\r\n            handleSubmit={(text) => updateComment(text, comment.id)}\r\n            handleCancel={() => {\r\n              setActiveComment(null);\r\n            }}\r\n          />\r\n        )}\r\n        <div className=\"comment-actions\">\r\n          {canReply && (\r\n            <div\r\n              className=\"comment-action\"\r\n              onClick={() =>\r\n                setActiveComment({ id: comment.id, type: \"replying\" })\r\n              }\r\n            >\r\n              Reply\r\n            </div>\r\n          )}\r\n          {canEdit && (\r\n            <div\r\n              className=\"comment-action\"\r\n              onClick={() =>\r\n                setActiveComment({ id: comment.id, type: \"editing\" })\r\n              }\r\n            >\r\n              Edit\r\n            </div>\r\n          )}\r\n          {canDelete && (\r\n            <div\r\n              className=\"comment-action\"\r\n              onClick={() => deleteComment(comment.id)}\r\n            >\r\n              Delete\r\n            </div>\r\n          )}\r\n         \r\n          {canCounterTroll && (\r\n             <div\r\n             className=\"comment-action\"\r\n             onClick={() =>\r\n               setActiveComment({ id: comment.id, type: \"trolling\" })\r\n             }\r\n           >\r\n               <Trobo trollComment={trollComment} comment={comment}/>\r\n           </div>\r\n          )}\r\n\r\n          \r\n        </div>\r\n        \r\n        {canTroll && !imgResponse && (\r\n          <CommentForm\r\n            submitLabel=\"Reply\"\r\n            handleSubmit={(text) => addComment(text, replyId)}\r\n            initialText={trollResponse}\r\n            hasCancelButton={true}\r\n            handleCancel={deleteComment}\r\n          />\r\n        )}\r\n\r\n        {console.log(\"Image response is \", imgResponse)}\r\n\r\n        {canTroll && imgResponse && (\r\n          <TrollResp\r\n          submitLabel=\"Reply\"\r\n          handleSubmit={(text) => addComment(text, replyId)}\r\n          hasCancelButton={true}\r\n          handleCancel={deleteComment}\r\n        />\r\n        )\r\n        }\r\n        \r\n        {isReplying && (\r\n          <CommentForm\r\n            submitLabel=\"Reply\"\r\n            handleSubmit={(text) => addComment(text, replyId)}\r\n          />\r\n        )}\r\n\r\n        \r\n\r\n        {replies.length > 0 && (\r\n          <div className=\"replies\">\r\n            {replies.map((reply) => (\r\n              <Comment\r\n                comment={reply}\r\n                key={reply.id}\r\n                setActiveComment={setActiveComment}\r\n                activeComment={activeComment}\r\n                updateComment={updateComment}\r\n                deleteComment={deleteComment}\r\n                addComment={addComment}\r\n                trollComment={trollComment}\r\n                trollResponse={trollResponse}\r\n                imgResponse={imgResponse}\r\n                parentId={comment.id}\r\n                replies={[]}\r\n                currentUserId={currentUserId}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\Trobo.js",[],"C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\Comments.js",["85"],"import { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\nimport {\r\n  getComments as getCommentsApi,\r\n  createComment as createCommentApi,\r\n  updateComment as updateCommentApi,\r\n  deleteComment as deleteCommentApi,\r\n} from \"../api\";\r\n\r\nconst Comments = ({ commentsUrl, currentUserId }) => {\r\n  const [backendComments, setBackendComments] = useState([]);\r\n  const [activeComment, setActiveComment] = useState(null);\r\n  const rootComments = backendComments.filter(\r\n    (backendComment) => backendComment.parentId === null\r\n  );\r\n  const [trollResponse, setTrollResponse] = useState(\"\");\r\n  const [imgResponse, setImgResponse] = useState(false);\r\n  const getReplies = (commentId) =>\r\n    backendComments\r\n      .filter((backendComment) => backendComment.parentId === commentId)\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n      );\r\n\r\n  const addComment = (text, parentId) => {\r\n    createCommentApi(text, parentId).then((comment) => {\r\n      setBackendComments([comment, ...backendComments]);\r\n      setActiveComment(null);\r\n    });\r\n  };\r\n\r\n  const updateComment = (text, commentId) => {\r\n    updateCommentApi(text).then(() => {\r\n      const updatedBackendComments = backendComments.map((backendComment) => {\r\n        if (backendComment.id === commentId) {\r\n          return { ...backendComment, body: text };\r\n        }\r\n        return backendComment;\r\n      });\r\n      setBackendComments(updatedBackendComments);\r\n      setActiveComment(null);\r\n    });\r\n  };\r\n\r\n  const deleteComment = (commentId) => {\r\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n      deleteCommentApi().then(() => {\r\n        const updatedBackendComments = backendComments.filter(\r\n          (backendComment) => backendComment.id !== commentId\r\n        );\r\n        setBackendComments(updatedBackendComments);\r\n      });\r\n    }\r\n  };\r\n\r\n  const trollComment = (comment, strategy) => {\r\n  \r\n    let query = \"http://localhost:9000/predict?query=\" + comment.body + \"&strategy=\" +strategy\r\n    console.log(query)\r\n    if(strategy == \"MEME\"){\r\n      setImgResponse(true)\r\n    } else {\r\n      setImgResponse(false)\r\n    }\r\n    console.log(imgResponse)\r\n  fetch(query,{\r\n    'methods':['GET','POST']\r\n  })\r\n  .then(response => response.json())\r\n  .then(data => {\r\n    console.log(data.prediction)\r\n    setTrollResponse(data.prediction)\r\n    setTrollResponse((prevState) => {\r\n      console.log(\"new state is\", prevState);\r\n      return prevState;\r\n    })\r\n    //console.log(\"troll response updated is \",trollResponse) \r\n  })\r\n  .catch(error => console.log(error))\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCommentsApi().then((data) => {\r\n      setBackendComments(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n\r\n    <div className=\"comments\" key={trollResponse}>\r\n      \r\n      <CommentForm submitLabel=\"Post\" handleSubmit={addComment} />\r\n      <div className=\"comments-container\">\r\n        {rootComments.map((rootComment) => (\r\n          <Comment\r\n            key={rootComment.id}\r\n            comment={rootComment}\r\n            replies={getReplies(rootComment.id)}\r\n            activeComment={activeComment}\r\n            setActiveComment={setActiveComment}\r\n            addComment={addComment}\r\n            deleteComment={deleteComment}\r\n            updateComment={updateComment}\r\n            trollComment={trollComment}\r\n            currentUserId={currentUserId}\r\n            trollResponse={trollResponse}\r\n            imgResponse={imgResponse}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","C:\\Users\\sharv\\Desktop\\Trobo\\src\\App.js",[],"C:\\Users\\sharv\\Desktop\\Trobo\\src\\api.js",[],"C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\CommentForm.js",["86"],"C:\\Users\\sharv\\Desktop\\Trobo\\src\\comments\\TrollResp.js",["87","88"],{"ruleId":"89","severity":1,"message":"90","line":33,"column":9,"nodeType":"91","endLine":33,"endColumn":37},{"ruleId":"92","severity":1,"message":"93","line":25,"column":9,"nodeType":"94","messageId":"95","endLine":25,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":42,"column":9,"nodeType":"91","endLine":42,"endColumn":37},{"ruleId":"92","severity":1,"message":"96","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":30,"column":9,"nodeType":"94","messageId":"95","endLine":30,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":50,"column":9,"nodeType":"91","endLine":50,"endColumn":37},{"ruleId":"97","severity":1,"message":"98","line":62,"column":17,"nodeType":"99","messageId":"100","endLine":62,"endColumn":19},{"ruleId":"92","severity":1,"message":"101","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":19},{"ruleId":"92","severity":1,"message":"101","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":24,"column":9,"nodeType":"91","endLine":24,"endColumn":35},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'isTrolling' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used."]